import {
    SlashCommandBuilder,
    ChatInputCommandInteraction,
    MessageFlags,
} from "discord.js";
import {
    Command,
    CommandOptions,
} from "@/core/abstractions/Command";

import { ICommandDependencies } from "../core/abstractions/interface/IDependencies"
/**
 * @class PingCommand
 * @description –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
 */
export default class PingCommand extends Command {
    public constructor(deps: ICommandDependencies) {
        const options: CommandOptions = {
            data: new SlashCommandBuilder()
                .setName("ping")
                .setDescription("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞ –∏ API Discord."),
            cooldown: 20,
        };
        super(deps, options);
    }

    public async run(interaction: ChatInputCommandInteraction): Promise<void> {
        try {
            const sent = await interaction.reply({
                embeds: [
                    this.embedFactory.createInfoEmbed(interaction.user, {
                        description: "üèì –ü–∏–Ω–≥...",
                    }),
                ],
                fetchReply: true,
                flags: MessageFlags.Ephemeral,
            });

            const websocketHeartbeat = this.client.ws.ping;
            const roundtripLatency =
                sent.createdTimestamp - interaction.createdTimestamp;

            await interaction.editReply({
                embeds: [
                    this.embedFactory.createSuccessEmbed(interaction.user, {
                        title: "–ü–æ–Ω–≥!",
                        fields: [
                            {
                                name: "–ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞",
                                value: `\`${roundtripLatency} –º—Å\``,
                                inline: true,
                            },
                            {
                                name: "–ó–∞–¥–µ—Ä–∂–∫–∞ WebSocket",
                                value: `\`${websocketHeartbeat} –º—Å\``,
                                inline: true,
                            },
                        ],
                    }),
                ],
            });
        } catch (error) {
            this.logger.error(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /ping:",
                error
            );

            const errorEmbed = this.embedFactory.createErrorEmbed(
                interaction.user,
                {
                    description:
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.",
                }
            );

            if (interaction.replied || interaction.deferred) {
                await interaction.followUp({
                    embeds: [errorEmbed],
                    flags: MessageFlags.Ephemeral,
                });
            } else {
                await interaction.reply({
                    embeds: [errorEmbed],
                    flags: MessageFlags.Ephemeral,
                });
            }
        }
    }
}
